{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Broo",
	"patterns": [
		{
			"include": "#broo"
		}
	],
	"repository": {
		"broo": {
			"patterns": [
				{ "include": "#open-tag" }, 
				{ "include": "#close-tag" },
				{ "include": "#expression" },
				{ "include": "#comment-" }
			]
		},
		"functionName": {
			"patterns": [
				{
					"comment": "For function declaration: function functionName()",
					"match": "(?<=function\\s+)[a-zA-Z0-9_]+(?=\\s*\\()",
					"name": "entity.name.function"
				},
				{
					"comment": "For calling functions: functionName()",
					"match": "(?<=(\\.|\\s|^|\\(|'|{))[a-zA-Z0-9_]+(?=\\()",
					"name": "entity.name.function"
				}
			]
		},
		"comment-": {
			"patterns": [
				{
					"comment": "Single line comments",
					"match": "(?<=(^|\\s)*)//.*?$",
					"name": "punctuation.definition.comment"
				},
				{
					"begin": "<!--",
					"end": "-->",
					"name": "punctuation.definition.comment"
				}
			]
		},
		"script-tag-logic-in-open-tag": {
			"begin": "<script>",
			"end": "</script>",
			"captures": {
				"0": { "name": "entity.name.function" }
			},
			"patterns": [
				{ "include": "#comment-" },
				{ "include": "#script-tag" },
				{ "include": "#open-tag" }, 
				{ "include": "#close-tag" },
				{ "include": "#expression"}
			]
		},
		"open-tag": {
			"begin": "<(?!(\\!|\\/))",
			"end": "(\\/>|>)",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.tag" },
				"1": { "name": "punctuation.definition.tag" }
			},
			"patterns": [
				{ "include": "#script-name" },
				{ "include": "#tag-name" },
				{ "include": "#tag-attributes" }
			]
		},
		"close-tag": {
			"begin": "</",
			"end": ">",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.tag" },
				"1": { "name": "punctuation.definition.tag" }
			},
			"patterns": [
				{ "include": "#script-name" },
				{ "include": "#tag-name" }
			]
		},
		"script-name": {
			"name": "entity.name.function", 
			"match": "\\s*script\\s*"
		},
		"tag-name": {
			"patterns": [
				{
					"name": "entity.name.tag",
					"match": "(?<=\\s*?(<|</))([a-zA-Z0-9_]+\\-?)+"
				}
			]
		},
		"tag-attributes": {
			"patterns": [
				{
					"match": "\\b([a-zA-Z0-9_]+)\\b",
					"name": "entity.other.attribute-name"
				},
				{
					"match": "=",
					"name": "punctuation.separator.key-value"
				},
				{
					"begin": "'",
					"end": "'",
					"captures": {
						"0": { "name": "punctuation.definition.string.begin" },
						"1": { "name": "punctuation.definition.string.end" }
					},
					"patterns": [{ "include": "#expression" }]
				},
				{
					"begin": "\"",
					"end": "\"",
					"captures": {
						"0": { "name": "punctuation.definition.string.begin" },
						"1": { "name": "punctuation.definition.string.end" }
					},
					"patterns": [{ "include": "#expression" }]
				}
			]
		},
		"expression": {
			"patterns": [
				{ "include": "#keywords" },
				{ "include": "#functionName" },
				{ "include": "#operator" },
				{ "include": "#strings" },
				{ "include": "#bananaStrings" },
				{ "include": "#objectKey"},
				{ "include": "#number" },
				{ "include": "#variable" }
			]
		},
		"variable": {
			"patterns": [
				{
					"comment": "preceeded by 'var '",
					"name": "variable.other.object.broo",
					"match": "(?<=var\\s+)[a-zA-Z0-9$_]+(?=(\\s|\\b|$))"
				},
				{
					"comment": "preceeded by ':'",
					"name": "variable.other.object.broo",
					"match": ":([a-zA-Z0-9$_]+)"
				},
				{
					"comment": "root variable followed by '.' or '['",
					"name": "entity.name.tag",
					"match": "(?<!\\.)[a-zA-Z0-9$_]+(?=(\\.|\\[))"
				},
				{
					"comment": "followed by '.' or '['",
					"name": "variable.other.object.broo",
					"match": "[a-zA-Z0-9$_]+(?=(\\.|\\[))"
				},
				{
					"comment": "preceeded by '.' (eg. 'somevar.var')",
					"name": "variable.other.object.broo",
					"match": "(?<=\\.\\s*)[a-zA-Z0-9$_]+(?=(\\s|\\b|$))"
				},
				{
					"comment": "surrounded by () or",
					"name": "variable.other.object.broo",
					"match": "(?<=(\\(|,)\\s*)[a-zA-Z0-9$_]+(?=(\\)|,|\\s|$))"
				},
				{
					"comment": "followed by an operator with some special rules before/after the operator",
					"name": "variable.other.object.broo",
					"match": "(?<=(^|\\s*|\\())[a-zA-Z0-9$_]+(?=(\\s+(\\=|not|gt|ne|eq|lt|le|ge|->|\\||\\?|\\?\\?|\\|\\||and|or|for|in|if|=|-=|\\+=|\\+|-)(\\s|$)))"
				},
				{
					"comment": "preceeded by an operator with some special rules before/after the operator",
					"name": "variable.other.object.broo",
					"match": "(?<=(\\s|\\()(\\=|not|gt|ne|eq|lt|le|ge|->|\\||\\?|\\?\\?|\\|\\||and|or|for|in|if|=)\\s+)[a-zA-Z0-9$_]+(?=\\s*(\\)|\\])|$)"
				},
				{
					"comment": "whole word",
					"name": "variable.other.object.broo",
					"match": "(?<!>)\\b[a-zA-Z0-9$_]+\\b(?!<)"
				}
			]
		},
		"objectKey": {
			"patterns": [
				{
					"comment": "followed by ':'",
					"name": "entity.name.tag",
					"match": "([a-zA-Z0-9$_]+)\\s*:"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.broo",
					"match": "(?<=(\\s|\\b|^))(var|const|equation|break|function|if|else|elseif|end|while|and|or|for|not|in|return)(?=(\\s|\\b|$))"
				},
				{
					"name": "variable.name.broo",
					"match": "(?<=(\\s|\\b|^))(undefined|null|false|true)(?=(\\s|\\b|$))"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"name": "try no color",
					"match": "(?<=(\\s|\\b|^))(gt|ne|eq|lt|le|ge|->|\\||\\?|\\?\\?|\\|\\|)(?=(\\s|\\b|$))"
				}	
			]
		},
		"number": {
			"patterns": [
				{
					"name": "constant.numeric.broo",
					"match": "(?<=(\\s|\\b|^))([0-9]+)(?=(\\s|\\b|$))"
				}
			]
		},
		"bananaStrings": {
			"name": "string.quoted.double.broo",
			"begin": "(?<=\\()\\s*\\|",
			"end": "\\|\\s*(?=\\))"
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.broo",
					"begin": "\"",
					"end": "\""
				},
				{
					"name": "string.quoted.single.broo",
					"begin": "'",
					"end": "'"
				}
			]
		}
	},
	"scopeName": "source.broo"
}